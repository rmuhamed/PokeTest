apply plugin: 'jacoco'

jacoco {
    toolVersion = "$jacoco_version"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    group "Reporting"
    description "Generate Jacoco coverage reports."

    reports {
        xml.enabled = true
        html.enabled = true
        html.destination file("${rootProject.buildDir}/coverage-report")
    }

    def javaClasses = []
    def kotlinClasses = []
    def javaSrc = []
    def kotlinSrc = []
    def execution = []

    def fileFilter = [
            '**/R.class',
            '**/Manifest*.*',
            'android/**/*.*',
            'androidx/room/*.*', //Exclude all anonymous class from room-compiler
            '**/*_Impl*.*', //DAO generated implementation by room-compiler
            '**/BuildConfig.*',
            '**/*Test*.*'
    ]

    rootProject.subprojects.each { project ->
        javaClasses   << fileTree(dir: "$project.buildDir/intermediates/javac/debug", excludes: fileFilter)
        kotlinClasses << fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
        javaSrc       << "$project.projectDir/src/main/java"
        kotlinSrc     << "$project.projectDir/src/main/kotlin"
        execution << fileTree(dir: project.buildDir, includes:
                [
                        'jacoco/testDebugUnitTest.exec',
                        'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'
                ])
    }

    print "Setting source and class directories"
    getSourceDirectories().setFrom(files([javaSrc, kotlinSrc]))
    getClassDirectories().setFrom(files([javaClasses, kotlinClasses]))

    print "Setting execution data from Connected tests and Junit ones"
    getExecutionData().setFrom(files(execution))

    doLast() {
        print "file://${reports.html.destination}/index.html"
    }
}
